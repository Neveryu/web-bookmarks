(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{530:function(a,t,s){"use strict";s.r(t);var e=s(10),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"git-总结分享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-总结分享"}},[a._v("#")]),a._v(" Git 总结分享")]),a._v(" "),t("h3",{attrs:{id:"基础使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础使用"}},[a._v("#")]),a._v(" 基础使用")]),a._v(" "),t("h3",{attrs:{id:"基础配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础配置"}},[a._v("#")]),a._v(" 基础配置")]),a._v(" "),t("p",[a._v("首先下载完，需要进行一些常规配置，如："),t("strong",[a._v("Email")]),a._v(" 、"),t("strong",[a._v("User")]),a._v(" 等。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" user.name "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"yourname"')]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" user.email "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"youremail"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" color.ui auto //高亮\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" core.editor "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" commit.template\n")])])]),t("h3",{attrs:{id:"权限配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#权限配置"}},[a._v("#")]),a._v(" 权限配置")]),a._v(" "),t("p",[a._v("生成SSH密钥，因为需要和服务器通信,粘贴的时候要注册把"),t("strong",[a._v("SSH==")]),a._v(" 后面的的邮箱删掉,")]),a._v(" "),t("p",[a._v("密钥位置在C盘"),t("code",[a._v("user/alaner/.ssh")]),a._v(" "),t("code",[a._v(".pub")]),a._v("是公共密钥，私钥要保管好")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("//备份密钥\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" key_backup\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" id_rsa* key_backup\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" id_rsa*\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ssh")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-T")]),a._v(" git@github.com //测试是否成功\n")])])]),t("h3",{attrs:{id:"常规工作流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常规工作流"}},[a._v("#")]),a._v(" 常规工作流")]),a._v(" "),t("h3",{attrs:{id:"获取文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取文件"}},[a._v("#")]),a._v(" 获取文件")]),a._v(" "),t("p",[a._v("第一种 获取git仓库的项目(这种是通过克隆的方式，也是最长用的)")]),a._v(" "),t("div",{staticClass:"language-bah extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("git clone git://github.com/xxx/xxx.git  \n")])])]),t("p",[a._v("第二种 本地新建文件，然后执行相关的命令")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" demo\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" demo\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" init //对git初始化，所有git的相关存储版本全部在这里\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" origin git@git.mofang.com:zhaoshuai/demo.git\n")])])]),t("h3",{attrs:{id:"修改文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改文件"}},[a._v("#")]),a._v(" 修改文件")]),a._v(" "),t("p",[a._v("每次修改完文件需要将对应的文件加入到版本库中")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" README //把文件加入到版本库\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'first commit'")]),a._v(" //提交注释，必须明确，有利用你还原文件   \n")])])]),t("h3",{attrs:{id:"提交到远程仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交到远程仓库"}},[a._v("#")]),a._v(" 提交到远程仓库")]),a._v(" "),t("p",[a._v("更改完文件把代码提交到远程仓库")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" origin master\n")])])]),t("p",[a._v("这里的流程应该是先去，把远程代码更新合并以后才去提交")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--rebase")]),a._v("  \n")])])]),t("h3",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[a._v("#")]),a._v(" 常见问题")]),a._v(" "),t("h3",{attrs:{id:"解决冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[a._v("#")]),a._v(" 解决冲突")]),a._v(" "),t("p",[a._v("每次更次代码，或提交代码，最常见的就是代码冲突，这问题就是开发人员，修改了同一个文件里的相同的地方那么这时就要解决冲突。")]),a._v(" "),t("p",[a._v("再从代码库更新代码到本地时，如果出现冲突，git 会停止更新合并代码而且会提示你去解决冲突，然后再断续那么这时你就应该去解决相关的冲突文件，然后再把文件加入到版本库里。")]),a._v(" "),t("p",[t("code",[a._v("--rebase")]),a._v(" 的意思是让合并分支线更清晰，也就是所谓的一条。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--rebase")]),a._v("  \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bouth file"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--continue")]),a._v(" //继续合并\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--abort")]),a._v(" //不更新合并，退回到合并之前的代码\n")])])]),t("p",[t("code",[a._v("pull")]),a._v(" 本身就是拉取代码并自动合并，还有另外一种方式就是拉取代码，手动合并")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" fetch origin master //从远程把代码拉下来，它会产生一个head头\n     \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge  FETCH_HEAD  \n")])])]),t("p",[a._v("这样就把代码合并了，这中间也有可能产生冲突解决方式是一样的,当然手动合并就是可通过 "),t("code",[a._v("git diff")]),a._v(" 去对比目的就是减少冲突的发生。")]),a._v(" "),t("h3",{attrs:{id:"还原版本-替换本地改动-利用标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#还原版本-替换本地改动-利用标签"}},[a._v("#")]),a._v(" 还原版本 && 替换本地改动 && 利用标签")]),a._v(" "),t("p",[a._v("当然更改文件错乱，或者相还原到某个版本，首先要你查看日志信息，然后查看你提交信息的commit ID然后进行还原")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset commit ID  \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset HEAD //还原到你最近提交的版本\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset ^HEAD //还原到你最近提交的版本的第二个\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--soft")]),a._v(" HEAD^  //放弃最新提交\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reflog show master //列出操作历史\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset master@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  //恢复\n")])])]),t("p",[a._v("如果你越改越乱，想重新获取一份最新的，你可能重新克隆一分，或者用下面这个命令")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout  files //你想还原的文件名称 还原单一文件\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" fetch origin  //放弃本地修改，重新获取代码，你还要把hard指向指向所有的\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v(" origin/master 本并将你本地主分支指向到它,如果不指向你的log信息不会变\n")])])]),t("p",[a._v("利用标签还原版本，当你的项目开发的算做一个版本时使用村签比较合适")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('git tag //查看标签\ngit add tag -a v1.1 -m "mobile version 1.1"\ngit reset v1.1\ngit tag v1.4-lw //轻量级标签\ngit tag -a v1.2 9fceb02 （commit id）//给已提交对象打标签\n')])])]),t("h3",{attrs:{id:"如果建立分支后-怎么合并代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果建立分支后-怎么合并代码"}},[a._v("#")]),a._v(" 如果建立分支后  怎么合并代码")]),a._v(" "),t("p",[a._v("分支应用场景，你在开发新功能，而这里有bug找你，你开发还没有完成，并不能全部提交，那么可以尝试分支新建一个分支去解决问题。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" deve //新建分支\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout master //切换分支\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" deve  //删除分支\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push origin "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("branch"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" // 提交分支\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge barnchname\n")])])]),t("h3",{attrs:{id:"常用命令操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令操作"}},[a._v("#")]),a._v(" 常用命令操作")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--list")]),a._v(" //查看配置信息\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("help")]),a._v(" //获取帮助 \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("help")]),a._v(" clone // 获取某个命令的帮助\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" status // 查看文件状态\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log  // 查看提交历史\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" // 这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit -am// 跳过暂缓区\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" fetch //到远程仓库中拉取所有你本地仓库中还没有的数据有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--cached")]),a._v(" //只移除暂存区\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--amend")]),a._v(" // 撤消提交\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v("\n有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote show origin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push origin "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--tags")]),a._v(" //把代标签的版本推送到服务器 默认不推荐标签\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" rebase master\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"commit info"')]),a._v(" 只提交暂存区文件忽略本地没有加入到暂存区的文件\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" remoteName 删除远程仓库\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" stash 保存当前工作进度 需要把本地文件追加到暂存区才可以使用\n\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clean "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-nd")]),a._v(" //将要删除哪些文件\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clean "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-fd")]),a._v(" //真要删除的文件整个世界清静了\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("###git aliases")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.co checkout\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.br branch\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.ci commit\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.st status\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.last "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'log -1 HEAD'")]),a._v("\n")])])]),t("h3",{attrs:{id:"got-git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#got-git"}},[a._v("#")]),a._v(" got git")]),a._v(" "),t("p",[a._v("文件归档")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" archive "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" last.zip master\n")])])]),t("h3",{attrs:{id:"高级功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级功能"}},[a._v("#")]),a._v(" 高级功能")]),a._v(" "),t("h3",{attrs:{id:"子模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子模块"}},[a._v("#")]),a._v(" 子模块")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule \n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" 公用库名字\n\n.gitmodules记录了每个submodule的引用信息，知道在当前项目的位置以及仓库的所在\n\n克隆带有submodule的仓库\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/repos/project1.git project1-b\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule\n前面带有-号告诉我们还没有检出\n检出之后再更新一下\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule update\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" .git/config\n\n\n把远程仓库拉到本地子模块\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" remote\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" submodule foreach "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" pull\n")])])]),t("h3",{attrs:{id:"相关资源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关资源"}},[a._v("#")]),a._v(" 相关资源")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://git-scm.com/figures/18333fig0201-tn.png",alt:"Alt text"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://git-scm.com/figures/18333fig0502-tn.png",alt:"Alt text"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://git-scm.com/figures/18333fig0511-tn.png",alt:"Alt text"}})]),a._v(" "),t("h3",{attrs:{id:"git-笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-笔记"}},[a._v("#")]),a._v(" Git 笔记")]),a._v(" "),t("ul",[t("li",[a._v("集中式版本管理工具，都有一个单一集中管理的服务器，这是与分布式最大的区别")]),a._v(" "),t("li",[a._v("分布式版本管理工具，并不只是提取最新的文件，而是克隆整个文件的版本")]),a._v(" "),t("li",[t("code",[a._v("Git")]),a._v(" 使用 "),t("code",[a._v("SHA-1")]),a._v(" 算法计算数据的校验,这里便知道每次回溯版本都需要你提\n交的"),t("code",[a._v("commit")]),a._v("的"),t("code",[a._v("id")]),a._v("也就是所谓的指像历史数据的指针。")]),a._v(" "),t("li",[a._v("文件的三种状态")])]),a._v(" "),t("ul",[t("li",[a._v("已提交 "),t("code",[a._v("committed")]),a._v(" 已经保存到本地数据库了")]),a._v(" "),t("li",[a._v("已修改 "),t("code",[a._v("modified")]),a._v("  修改了某些文件但没有提交")]),a._v(" "),t("li",[a._v("已暂存 "),t("code",[a._v("staged")]),a._v("    已修改的文件放在下次提交时保存")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("git 恢复\ngit reset --hard version")])]),a._v(" "),t("li",[t("p",[a._v("查看记录命令高级还原\ngit reflog")])]),a._v(" "),t("li",[t("p",[a._v("查看谁动了你的代码\ngit blam file name")])]),a._v(" "),t("li",[t("p",[a._v("提交部分更改\ngit add -p")])]),a._v(" "),t("li",[t("p",[a._v("暂停\ngit stash\ngit stash apply")])]),a._v(" "),t("li",[t("p",[a._v("检查丢失提交\ngit fsck --lost-found")])])]),a._v(" "),t("p",[a._v("cherry-pick 从另一个分支里选出单独的一个提交，然后合并到当前分支。如果你正并行工作在两个或者更多的分支上，你也许会发现一个存在于所有分支上的bug。如果你解决了一个分支上的这个bug，你可以拣选这个对应的提交应用到其他分支上，而不会弄乱其他文件或者提交")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" cherry-pick "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("commit_hash"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("Note :分支搞懂了，你在增加功能的时候新建一个分支，然后提交这个功能分支， 另一个开发人员，pull这个分支下来代码是代你这个功能，如果有问题，需要上线，那直接在拉下master没有问题的主分支。如果功能测试通过，后端人员合并开发分支到master而我下次再写代码时，可以先更新下我的主分支，这样拿到新版本的代码，再开发时，和上面操作一样。")]),a._v(" "),t("p",[a._v("如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone git://github.com/schacon/grit.git mygrit\n")])])]),t("p",[a._v("要养成一开始就设置好 "),t("code",[a._v(".gitignore")]),a._v(" 文件的习惯，以免将来误提交这类无用的文件。")]),a._v(" "),t("p",[a._v("文件 "),t("code",[a._v(".gitignore")]),a._v(" 的格式规范如下：")]),a._v(" "),t("p",[a._v("所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n可以使用标准的 glob 模式匹配。\n匹配模式最后跟反斜杠（/）说明要忽略的是目录。\n要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n请注意，单单 git diff 不过是显示还没有暂存起来的改动")]),a._v(" "),t("p",[a._v("跳过使用暂存区域")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-am")]),a._v("\n")])])]),t("p",[a._v("只从仓库移除")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("git rm --cached readme.txt\n")])])]),t("p",[a._v("修改最后一次提交\n有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：\n"),t("code",[a._v("$ git commit --amend")]),a._v("\n使用时需要先add所需要的文件再commit\n关联远程仓库第一次需要加-u")]),a._v(" "),t("p",[a._v("git 恢复")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v(" version\n")])])]),t("p",[a._v("查看记录命令高级还原 "),t("code",[a._v("git reflog")])])])}),[],!1,null,null,null);t.default=n.exports}}]);