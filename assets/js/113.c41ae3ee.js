(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{536:function(a,e,t){"use strict";t.r(e);var s=t(10),v=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"vim1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim1"}},[a._v("#")]),a._v(" vim1")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("vim操作")]),a._v(" "),e("p",[a._v("vim操作")])]),a._v(" "),e("h3",{attrs:{id:"vim-配置自定义比较工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-配置自定义比较工具"}},[a._v("#")]),a._v(" Vim 配置自定义比较工具")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" diff.tool vimdiff\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" difftool.prompt "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" config "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--global")]),a._v(" alias.d difftool\n// 使用时\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" d file1\n")])])]),e("h3",{attrs:{id:"vim-比较命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-比较命令"}},[a._v("#")]),a._v(" Vim 比较命令")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("vimdiff mvimdiff gvimdiff\n:vertical diffsplit FILE_RIGHT\n")])])]),e("h3",{attrs:{id:"vimdiff-charset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vimdiff-charset"}},[a._v("#")]),a._v(" Vimdiff charset")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("c "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v("        - next difference\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("c "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v("        - previous difference\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("          - "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" obtain 与dp相反把另一个文件的差异复制到当前文件do "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("diff "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"get"')]),a._v("，之所以不用dg，是因为dg已经被另一个命令占用了"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ndp          - "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" put 当前文件的差异复制到另一个文件\nzo          - "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v(" folded text\nzc          - close folded text\n:diffupdate - re-scan the files "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" differences 重新比较文件\n")])])]),e("h3",{attrs:{id:"vim-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-命令"}},[a._v("#")]),a._v(" Vim 命令")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("VU                  整行大写\ng~~                 整行大小写反转\nvEU                 单词转为大写\nvE~                 单词大小写反转\nggguG               所有文本小写\ngggUG               所有文本大写    :browse e           图像化文件浏览器\n:1,10 w outfile     "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("到10行内容写到outfile\n:1,10 w "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" outfile  "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("到10行内容追加到outfile\n:r infile           插入文件内容\n:23r infile         插入文件23行的内容\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" class **/*.tpl  在所有tpl文件里查找class\ngf                  打开光标下文件名对应的文件\n:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）\nctrl + V  "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）\n\n:vimgrep /SearchItem/ **/*.scss grep文件\n")])])]),e("h3",{attrs:{id:"vim正则匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim正则匹配"}},[a._v("#")]),a._v(" vim正则匹配")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v(":%s/str1/str2/        用字符串 str2 替换行中首次出现的字符串 str1\n:s/str1/str2/g        用字符串 str2 替换行中所有出现的字符串 str1\n:.,$ s/str1/str2/g    用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1\n:1,$ s/str1/str2/g    用字符串 str2 替换正文中所有出现的字符串 str1\n:g/str1/s//str2/g     功能同上\n:m,ns/str1/str2/g     将从m行到n行的str1替换成str2\n")])])]),e("ul",[e("li",[a._v("将空格转化为制表符的命令则恰好相反：")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":set noexpandtab\n:%retab!\n")])])]),e("ul",[e("li",[a._v("制表符转空格")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":set expandtab\n:%retab\n")])])]),e("ul",[e("li",[a._v("排版注释")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("gq]/\n")])])]),e("h2",{attrs:{id:"vim-笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-笔记"}},[a._v("#")]),a._v(" vim 笔记")]),a._v(" "),e("h3",{attrs:{id:"vim-分为普通模式、插入模式、命令模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-分为普通模式、插入模式、命令模式"}},[a._v("#")]),a._v(" vim 分为普通模式、插入模式、命令模式")]),a._v(" "),e("p",[a._v('查看自己是什么模式 "'),e("code",[a._v(":set showmode")]),a._v(' "\n(搞不清模式的清况下，可以连续按esc键)')]),a._v(" "),e("h3",{attrs:{id:"新建打开文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建打开文件"}},[a._v("#")]),a._v(" 新建打开文件")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("gvim file.txt")])]),a._v(" "),e("li",[e("code",[a._v("edit foot.txt")])]),a._v(" "),e("li",[e("code",[a._v("gvim one.c two.c")]),a._v(" ( ** 同时编辑多个文件，默认会先打开第一个,:next :previous :last :first 则打开第二个** :wnext)")]),a._v(" "),e("li",[e("code",[a._v("args five.c six.c sever.h")]),a._v(" (编辑另一个文件列表)")]),a._v(" "),e("li",[e("code",[a._v("vim -R file")]),a._v(" (只读文件打开)")]),a._v(" "),e("li",[e("code",[a._v('"fyy')]),a._v(' (存入寄存器，寄存器粘贴"fp)')]),a._v(" "),e("li",[e("code",[a._v("gvim -M file")])]),a._v(" "),e("li",[e("code",[a._v("saveas moove.c")]),a._v(" (修改文件名)")])]),a._v(" "),e("h3",{attrs:{id:"普通模式移动光标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#普通模式移动光标"}},[a._v("#")]),a._v(" 普通模式移动光标")]),a._v(" "),e("p",[e("code",[a._v("h j k l")])]),a._v(" "),e("h3",{attrs:{id:"词移动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词移动"}},[a._v("#")]),a._v(" 词移动")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("w")]),a._v(" (向前移动一个单词，可以配合计数,如3w)")]),a._v(" "),e("li",[e("code",[a._v("b")]),a._v("  (向后移动一个单词，原理同w)")]),a._v(" "),e("li",[e("code",[a._v("e")]),a._v(" (移动到下一个单词的词末) ge 移动到前一个单词的词末")]),a._v(" "),e("li",[e("code",[a._v("$")]),a._v(" (移动到行尾,2$移动到第二行行末)")]),a._v(" "),e("li",[e("code",[a._v("^")]),a._v(" (移动到行首)")]),a._v(" "),e("li",[e("code",[a._v("0")]),a._v(" (移动到第一行的第一个非空字符)")]),a._v(" "),e("li",[e("code",[a._v("fx")]),a._v(" (移动到一个指定字符，f是find查找的意思) F向左查找")]),a._v(" "),e("li",[e("code",[a._v("tx")]),a._v(" (把光标移动到目标沉降伯前一个字符上)")]),a._v(" "),e("li",[e("code",[a._v("%")]),a._v(" (匹配括号)")]),a._v(" "),e("li",[e("code",[a._v("G")]),a._v("  (移动到文件末)")]),a._v(" "),e("li",[e("code",[a._v("gg")]),a._v("  (移动到文件首)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + g")]),a._v("  (确定当前位置)")]),a._v(" "),e("li",[e("code",[a._v("``")]),a._v(" (使用标记跳回去原来的地方)")])]),a._v(" "),e("h3",{attrs:{id:"删除字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除字符"}},[a._v("#")]),a._v(" 删除字符")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("x")]),a._v("  (删除一个字符)")]),a._v(" "),e("li",[e("code",[a._v("X")]),a._v("  (删除光标左边一个字符)")]),a._v(" "),e("li",[e("code",[a._v("dd")]),a._v("  (删除一行)")]),a._v(" "),e("li",[e("code",[a._v("cc")]),a._v("  (修改一行)")]),a._v(" "),e("li",[e("code",[a._v("J")]),a._v("  (删除换行符，其实等于合并成一行)")]),a._v(" "),e("li",[e("code",[a._v("dw")]),a._v(" (删除一个单词)")]),a._v(" "),e("li",[e("code",[a._v("daw")]),a._v(" (删除一个单词)")]),a._v(" "),e("li",[e("code",[a._v("D")]),a._v("  (删除到行尾)")]),a._v(" "),e("li",[e("code",[a._v("D")]),a._v("  (删除到行尾)")]),a._v(" "),e("li",[e("code",[a._v("S")]),a._v("  (修改一整行)")]),a._v(" "),e("li",[e("code",[a._v("s")]),a._v("  (修改一个字符)")]),a._v(" "),e("li",[e("code",[a._v("de")]),a._v(" (删除一个单词)")]),a._v(" "),e("li",[e("code",[a._v("cw")]),a._v(" (修改一个词组)")]),a._v(" "),e("li",[e("code",[a._v("r")]),a._v(" (替换单个字符)")]),a._v(" "),e("li",[e("code",[a._v(".")]),a._v(" (重复执行操作)")]),a._v(" "),e("li",[e("code",[a._v("xp")]),a._v(" (交换两个字符)")])]),a._v(" "),e("h3",{attrs:{id:"粘贴复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#粘贴复制"}},[a._v("#")]),a._v(" 粘贴复制")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("y")]),a._v(" (复制，yw 复制一个单词，yy 复制一行 Y)")]),a._v(" "),e("li",[e("code",[a._v("p")]),a._v(" (粘贴)")]),a._v(" "),e("li",[e("code",[a._v("*yy")]),a._v(" (拷贝一行到剪贴板)")]),a._v(" "),e("li",[e("code",[a._v("*p")]),a._v(" (粘贴)")])]),a._v(" "),e("h3",{attrs:{id:"撤销与重做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销与重做"}},[a._v("#")]),a._v(" 撤销与重做")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("u")]),a._v("  (撤销操作) U (行撤销)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + r")]),a._v("  (是你撤销过多，重做)")])]),a._v(" "),e("h3",{attrs:{id:"插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[a._v("#")]),a._v(" 插入")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("i")]),a._v(" (在光标前插入) I (在行首)")]),a._v(" "),e("li",[e("code",[a._v("a")]),a._v(" (在光标后插入) A (在行末)")])]),a._v(" "),e("h3",{attrs:{id:"新行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新行"}},[a._v("#")]),a._v(" 新行")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("o")]),a._v("  (在光标下方插入新的空行) O (在光标的止方插入新的空行)")])]),a._v(" "),e("h3",{attrs:{id:"指定计数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指定计数"}},[a._v("#")]),a._v(" 指定计数")]),a._v(" "),e("ul",[e("li",[a._v("用在很多地方(比如向上移动10行，则可以用10k，插入3个！！！，则可以用3a! esc)")])]),a._v(" "),e("h3",{attrs:{id:"退出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#退出"}},[a._v("#")]),a._v(" 退出")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("zz")]),a._v("  (保存文件并退出)")]),a._v(" "),e("li",[e("code",[a._v("q!")]),a._v("  (放弃之前的修改，并退出)")]),a._v(" "),e("li",[e("code",[a._v("q")]),a._v(" (提示退出)")])]),a._v(" "),e("h3",{attrs:{id:"滚屏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#滚屏"}},[a._v("#")]),a._v(" 滚屏")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("ctrl + u")]),a._v(" (向上滚)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + d")]),a._v(" (向下滚)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + e")]),a._v(" (向下滚)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + f")]),a._v(" (正向滚动一整屏)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + b")]),a._v(" (反向滚支一整屏)")]),a._v(" "),e("li",[e("code",[a._v("zz")]),a._v(" (光标处于屏幕中间)")])]),a._v(" "),e("h3",{attrs:{id:"自定义标记-强大"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义标记-强大"}},[a._v("#")]),a._v(" 自定义标记(强大)")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("ma")]),a._v(" (用a标记当前光标的位置)")])]),a._v(" "),e("h3",{attrs:{id:"查找"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[a._v("#")]),a._v(" 查找")]),a._v(" "),e("ul",[e("li",[e("code",[a._v('"/String"')]),a._v(" (查找指定的字符串，使用n则找到下一个)")]),a._v(" "),e("li",[e("code",[a._v('"?String"')]),a._v(" (反向查找)")]),a._v(" "),e("li",[e("code",[a._v('"*"')]),a._v(" (把光标定位到要查找的单词然后shift + *)")]),a._v(" "),e("li",[e("code",[a._v('"#"')]),a._v(" (与*号相同)")])]),a._v(" "),e("h3",{attrs:{id:"可视模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可视模式"}},[a._v("#")]),a._v(" 可视模式")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("v")]),a._v(" 进入可视模式")]),a._v(" "),e("li",[e("code",[a._v("V")]),a._v(" 选择一行")]),a._v(" "),e("li",[e("code",[a._v("o")]),a._v(" (选择模式下按o来选择一端，还是另一端)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + q")]),a._v(" 块选关闭所有窗口择")])]),a._v(" "),e("h3",{attrs:{id:"命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[a._v("#")]),a._v(" 命令")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("set ruler")])]),a._v(" "),e("li",[e("code",[a._v("set number nonumber")])]),a._v(" "),e("li",[e("code",[a._v("set ignorecase")])]),a._v(" "),e("li",[e("code",[a._v("set backgroun=dark")])]),a._v(" "),e("li",[e("code",[a._v("set hlsearch")])]),a._v(" "),e("li",[e("code",[a._v("colorscheme evening")])]),a._v(" "),e("li",[e("code",[a._v("args")]),a._v(" (查看文件列表)")]),a._v(" "),e("li",[e("code",[a._v("set autowrite")]),a._v(" (自动保存)")]),a._v(" "),e("li",[e("code",[a._v("write >> files")]),a._v(" (追加到文件)")]),a._v(" "),e("li",[e("code",[a._v("set modifiable")]),a._v(" (去掉保护)")]),a._v(" "),e("li",[e("code",[a._v("set write")])]),a._v(" "),e("li",[e("code",[a._v("split")]),a._v(" (分窗口,close关闭窗口：only关闭所有窗口 new 编辑一个新文件，接收计算例如3split demo.c)")]),a._v(" "),e("li",[e("code",[a._v('ctrl + w + "+"')]),a._v(" (改变窗口大小)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + w")]),a._v(" (切换分割窗口，加入方向键 h j k l)")]),a._v(" "),e("li",[e("code",[a._v("vsplit")]),a._v(" (垂直分割)")]),a._v(" "),e("li",[e("code",[a._v("ctrl + w + K")]),a._v(" (移动窗口)")]),a._v(" "),e("li",[e("code",[a._v("qall")]),a._v(" (关闭所有窗口)")]),a._v(" "),e("li",[e("code",[a._v("vertical diffsplit main.c")])]),a._v(" "),e("li",[e("code",[a._v("tabedit files")]),a._v(" (tab页)")]),a._v(" "),e("li",[e("code",[a._v("set noscrollbind")]),a._v(" (禁止分屏光标跟随)")]),a._v(" "),e("li",[e("div",{staticClass:"language-e : $MYVIMRC extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code")])])]),a._v(" "),e("li",[e("code",[a._v("buffers")]),a._v(" 查看缓存区 buffer num 打开缓存文件")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":bn -- buffer列表中下一个 buffer\n:bp -- buffer列表中前一个 buffer\n:b# -- 你之前所在的前一个 buffer\n")])])]),e("h3",{attrs:{id:"vimwiki"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vimwiki"}},[a._v("#")]),a._v(" vimwiki")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<leader>ww 在当前窗口打开维基首页\n<leader>wt 在新tab打开维基首页\n<leader>w<leader>w 打开/新建当天日记\n<leader>w<keader>t 在新tab打开/新建当天日记\n<leader>ws 选择维基项目（详见下面的“多个维基项目”一节）\nmap <S-F4> :VimwikiAll2HTML<cr>\nmap <F4> :Vimwiki2HTML<cr>\n")])])]),e("p",[a._v("在vim中，有时需要将tab转换成space。使用ret命令（replace tab）。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[range]ret[ab]! [new-tabstop]\n")])])]),e("p",[a._v("举例：将第一行到文件尾的tab转换成space，每个tab用4个space替代。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":set expandtab\n:%ret! 4\n")])])]),e("p",[a._v("如果没有给定4，则用当前的tab宽度设定替换为space。")]),a._v(" "),e("p",[a._v("其它相关命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":set tabstop=4        设定tab宽度为4个字符\n:set shiftwidth=4     设定自动缩进为4个字符\n:set expandtab        用space替代tab的输入\n:set noexpandtab      不用space替代tab的输入\n----- end 80 page ------\n")])])]),e("p",[a._v("以前用editplus的时候,有一个在文件中查找的功能,可以在所有打开的文件中查找字符串,也可以在某一个目录及它的子目录中查找.那么在VIM中是否也有相关的功能呢?答案当然是肯定的.VIM中有个类似grep的命令,叫做vimgrep,语法如下:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":vimgrep /{pattern}/[g][j] {file} ...\n")])])]),e("p",[a._v("简单来讲,就是在路径和文件命符合{file}的所有文件中,查找符合{pattern}的字符串.(查找的结果可以用:copen命令打开quickfix列表查看).\n没有参数g的话,则行只查找一次关键字.反之会查找所有的关键字.\n没有参数j的话,查找后,VIM会跳转至第一个关键字所在的文件.反之,只更新结果列表(quickfix).")]),a._v(" "),e("p",[a._v("洒家再给几个例子,比方")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":vimgrep /the menu/ *.php\n")])])]),e("p",[a._v('表示在当前目录下的扩展名为php的所有文件中,查找字符串"the menu".')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":vimgrep /the menu/ ./includes/*.*\n")])])]),e("p",[a._v('表示在当前目录中的"includes"目录里的所有文件中,查找字符串"the menu".')]),a._v(" "),e("p",[a._v("如果要在当前目录及其子目录中查找怎么办呢?也好办")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":vimgrep /the menu/ **/*.*\n")])])]),e("p",[a._v("用这句就可以了.")]),a._v(" "),e("p",[a._v("查找时{pattern}可用正则表达式,使用起来和'/'命令是一样的,就不多说了.")]),a._v(" "),e("p",[a._v('查找的结果可以用":copen"命令查看,在列表里,将光标移动至相应的位置,按回车就打开对应的文件了.\n注:')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(":copen    打开quickfix\n\n:cclose    关闭quickfix\n\n:cc    是在转到当前查找到的位置\n:cn    转到下一个位置\n:cp    转到前一个位置\n")])])]),e("p",[a._v("当然,用grep同样可以达到这个效果,不过用vimgrep的好处就是与系统无关,能适用于所有系统的VIM,而且能自动识别文件编码和换行.嘿嘿,VIM就是你用的越多就越能感觉到它的强大了.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("gD 跳到第一次引用的地方\ngd 只在当前函数查找\nmarker 建立标记 m1 建立1 m2 建立2 使用`1 `2跳转\nmakes 查看标记\ngf 跳到连接的文件\nctrl + z stop vim  open shell\nfg commint 打开 stop vim-\n排版注释\ngq]/\n:command 列出用户定义命令\nvimgrep /匹配模式/[g][j] 要搜索的文件/范围 \ng：表示是否把每一行的多个匹配结果都加入\nj：表示是否搜索完后定位到第一个匹配位置\nvimgrep /pattern/ %           在当前打开文件中查找\nvimgrep /pattern/ *             在当前目录下查找所有\nvimgrep /pattern/ **            在当前目录及子目录下查找所有\nvimgrep /pattern/ *.c          查找当前目录下所有.c文件\nvimgrep /pattern/ **/*         只查找子目录\n\ncn                                          查找下一个\ncp                                          查找上一个\ncopen                                    打开quickfix\ncw                                          打开quickfix\ncclose                                   关闭qucikfix\nhelp vimgrep                       查看vimgrep帮助]]\n")])])]),e("p",[e("a",{attrs:{href:"http://blog.csdn.net/qilihechuncai/article/details/8587389",target:"_blank",rel:"noopener noreferrer"}},[a._v("vimgrep"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("Amazing custom search command. Thansk to Ingo: "),e("a",{attrs:{href:"http://stackoverflow.com/a/24818933/1147859",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://stackoverflow.com/a/24818933/1147859"),e("OutboundLink")],1)]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vommand -nargs=+ Se execute 'vimgrep /' . [<f-args>][0] . '/ **/*.' . [<f-args>][1]\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vim -u ~/.vimrc.basic\n")])])]),e("p",[a._v('"还有一个值得知道的技巧，在 Vim 中键入 CTRL-Z 会将 Vim 临时挂起并返回其父进程（多数情况下就是 Terminal Shell），之后在终端里输入 fg 回车之后会回到 Vim。这个技巧有助于你快捷的往返于 Vim 和 终端之间。如果你不方便按 CTRL-Z（比如 Windows……），可以用命令 :st[op] 或 :sus[pend] 代替。\n"')])])}),[],!1,null,null,null);e.default=v.exports}}]);